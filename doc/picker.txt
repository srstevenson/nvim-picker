*picker.txt* A fuzzy picker for Neovim and Vim                            *picker*

==============================================================================
CONTENTS                                                       *picker-contents*

    1. About .....................................|picker-about|
    2. Commands ..................................|picker-commands|
    3. Mappings ..................................|picker-mappings|
    4. Configuration .............................|picker-configuration|
    5. Functions .................................|picker-functions|
    6. Issues ....................................|picker-issues|
    7. Licence ...................................|picker-licence|

==============================================================================
ABOUT                                                             *picker-about*

vim-picker is a fuzzy file, buffer, and tag picker for Neovim and Vim.

==============================================================================
COMMANDS                                                       *picker-commands*

vim-picker provides the following commands:

                                                            *picker-:PickerEdit*
:PickerEdit             Pick a file to edit in the current window.

                                                           *picker-:PickerSplit*
:PickerSplit            Pick a file to edit in a new horizontal split.

                                                         *picker-:PickerTabedit*
:PickerTabedit          Pick a file to edit in a new tab.

                                                          *picker-:PickerVsplit*
:PickerVsplit           Pick a file to edit in a new vertical split.

                                                          *picker-:PickerBuffer*
:PickerBuffer           Pick a buffer to edit in the curent window.

                                                             *picker-:PickerTag*
:PickerTag              Pick a tag to jump to in the current window.

                                                            *picker-:PickerStag*
:PickerStag             Pick a tag to jump to in a new horizontal split.

                                                       *picker-:PickerBufferTag*
:PickerBufferTag        Pick a tag from the current buffer to jump to.

                                                            *picker-:PickerHelp*
:PickerHelp             Pick a help tag to jump to in the current window.

                                                *picker-:PickerListUserCommands*
:PickerListUserCommands Display a list of registered user-defined commands.

==============================================================================
MAPPINGS                                                       *picker-mappings*

vim-picker provides the following |<Plug>| mappings:

<Plug>PickerEdit                    Execute :PickerEdit
<Plug>PickerSplit                   Execute :PickerSplit
<Plug>PickerTabedit                 Execute :PickerTabedit
<Plug>PickerVsplit                  Execute :PickerVsplit
<Plug>PickerBuffer                  Execute :PickerBuffer
<Plug>PickerTag                     Execute :PickerTag
<Plug>PickerStag                    Execute :PickerStag
<Plug>PickerBufferTag               Execute :PickerBufferTag
<Plug>PickerHelp                    Execute :PickerHelp
<Plug>PickerListUserCommands        Execute :PickerListUserCommands

==============================================================================
CONFIGURATION                                             *picker-configuration*

In directories which are not inside a Git repository, vim-picker will use `fd`
(https://github.com/sharkdp/fd) to list files, falling back to `find` if `fd`
is not available. To use an alternative to `fd`, set `g:picker_find_executable`
and `g:picker_find_flags` in your |vimrc|. For example, to use ripgrep
(https://github.com/BurntSushi/ripgrep) set:
>
    let g:picker_find_executable = 'rg'
    let g:picker_find_flags = '--color never --files'
<
By default vim-picker will use `fzy` (https://github.com/jhawthorn/fzy) as the
fuzzy selector. You can change this by setting `g:picker_selector_executable`
and `g:picker_selector_flags` in your |vimrc|. For example, to use `pick`
(https://github.com/mptre/pick) set:
>
    let g:picker_selector_executable = 'pick'
    let g:picker_selector_flags = ''
<
By default, vim-picker will run the fuzzy selector in a full width split at
the bottom of the window, using |:botright|. You can change this by setting
`g:picker_split` in your |vimrc|. For example, to open a full width split at
the top of the window, set:
>
    let g:picker_split = 'topleft'
<
See |opening-window| for other valid values.

To specify the height of the window in which the fuzzy selector is opened, set
`g:picker_height` in your |vimrc|. The default is 10 lines:
>
    let g:picker_height = 10
<

==============================================================================
FUNCTIONS                                                     *picker-functions*

                                                              *picker#Execute()*
picker#Execute({id})
    Execute the fuzzy selector using the user-defined command with the given
    identifier.

                                                             *picker#Register()*
picker#Register({id}, {selection_type}, {vim_command}, {shell_command})
    Register a new user-defined command.

    When activated with |picker#Execute()|, the output of the shell command
    will be piped into the fuzzy selector, the line selected by the user will
    be processed according to {selection_type}, and the processed line will
    finally be passed as a single argument to {vim_command}.

    {id} is a string specifying a unique name used to identify the
    user-defined command with |picker#Execute()|.

    {selection_type} is a string equal to either 'string' or 'file'. 'string'
    selections are passed unchanged as a single argument to {vim_command}.
    'file' selections are treated as filenames: spaces and special characters
    are escaped before executing {vim_command}.

    {vim_command} is a string specifying the Vim command which will be called
    with the user's selection as a single argument.

    {shell_command} is a string specifying a shell command consisting of
    either a single command or a series of piped commands that will generate a
    newline separated list of candidates to be piped to the fuzzy selector.

==============================================================================
ISSUES                                                           *picker-issues*

Bug reports and patches are welcome on the issue tracker at
https://github.com/srstevenson/vim-picker/issues

==============================================================================
LICENCE                                                         *picker-licence*

Copyright Â© 2016-2019 Scott Stevenson.

vim-picker is distributed under the terms of the ISC licence.

==============================================================================
vim:et:ft=help:sts=4:tw=78:
